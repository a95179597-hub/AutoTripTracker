import UIKit
import Firebase
import FirebaseMessaging
import AppsFlyerLib


@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    
    var window: UIWindow?
    
    func application(_ application: UIApplication,
                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        
        print("üöÄ AppDelegate start")
        FirebaseApp.configure()
        
         UNUserNotificationCenter.current().delegate = self
         UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, _ in
         print("üîî Push permission: \(granted)")
         DispatchQueue.main.async { UIApplication.shared.registerForRemoteNotifications() }
         }
         Messaging.messaging().delegate = TokenStore.shared
         
        
        TokenStore.shared.start()
        Messaging.messaging().delegate = self
        UNUserNotificationCenter.current().delegate = self
        print("‚úÖ Firebase configured")
        
        
        AppsFlyerLib.shared().appsFlyerDevKey = "mpNYjAVqWiS5DMw4sBXsRG"
        AppsFlyerLib.shared().appleAppID     = "6670198961"
        AppsFlyerLib.shared().delegate       = self
       // AppsFlyerLib.shared().isDebug        = true // –ø–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å
        
        AppsFlyerLib.shared().start()
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID + AdServices token
        let uuid = DeviceIDProvider.persistedLowerUUID()
        let att = AdServicesTokenProvider.fetchBase64Token()
        
        // –õ–æ–≥ —Å–µ—Å—Å–∏–∏ –≤ Realtime DB
        FirebaseLogger.logSession(uuid: uuid, attToken: att)
        
        // –ü–µ—Ä–µ–¥–∞–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ StartGateService (—á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è)
        StartGateService.shared.configureSession(uuid: uuid, attToken: att)
        
        // –û–∫–Ω–æ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π VC
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = LaunchViewController()
        window?.makeKeyAndVisible()
        print("‚úÖ UIWindow + LaunchViewController set")

        
        return true
    }
    
    func application(_ application: UIApplication,
                     supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
        let m = OrientationManager.shared.mask
        print("üß≠ supportedInterfaceOrientations ‚Üí \(m)")
        return m
    }
    
    func application(_ application: UIApplication,
                     didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        Messaging.messaging().apnsToken = deviceToken
        print("‚úÖ APNs token set for FirebaseMessaging")
    }
    
}

final class OrientationManager {
    static let shared = OrientationManager()
    private init() {}
    
    var mask: UIInterfaceOrientationMask = .all
}

extension AppDelegate: MessagingDelegate, UNUserNotificationCenterDelegate {
    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        print("‚úÖ FCM token: \(fcmToken ?? "nil")")
        // –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ —Å–≤–æ–π backend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
}

extension AppDelegate: AppsFlyerLibDelegate {
    func onConversionDataSuccess(_ conversionInfo: [AnyHashable : Any]) {
        print("‚úÖ AppsFlyer conversion data: \(conversionInfo)")
    }
    func onConversionDataFail(_ error: Error) {
        print("‚ùå AppsFlyer conversion error: \(error.localizedDescription)")
    }
}
